[manifest]
version = "1.0.0"
dump_lua = true
priority = 3

## Check Blind
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if G.GAME.round_resets.blind_states.Boss == 'Defeated' then'''
position = 'before'
match_indent = true
payload = '''
if G.GAME.round_resets.blind_states.Small == 'Select' then
    local types = {'Small', 'Big'}
    for _, blind in ipairs(types) do
        if G.GAME.modifiers.ortalab_only or pseudorandom('ortalab_check') < 3/8 then
            G.GAME.round_resets.blind_choices[blind] = pseudorandom_element(Ortalab_blinds[blind], pseudoseed('ortalab_blind'))
        else
            G.GAME.round_resets.blind_choices[blind] = blind == 'Small' and 'bl_small' or 'bl_big'
        end
    end
end
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.round_resets.blind_states.Big = 'Defeated'"
position = 'after'
match_indent = true
payload = '''
elseif Ortalab_blinds.Small[G.GAME.round_resets.blind.key] then
    G.GAME.round_resets.blind_states.Small = 'Defeated'
elseif Ortalab_blinds.Big[G.GAME.round_resets.blind.key] then
    G.GAME.round_resets.blind_states.Big = 'Defeated'
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''ease_to = G.GAME.chips + math.floor(hand_chips*mult),'''
position = 'at'
match_indent = true
payload = '''ease_to = G.GAME.blind.config.blind.key == 'bl_ortalab_fork' and not G.GAME.blind.disabled and G.GAME.chips + math.min(math.floor(hand_chips*mult), G.GAME.blind.chips*G.GAME.blind.config.blind.config.extra.cap) or G.GAME.chips + math.floor(hand_chips*mult),'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if not self.config.center.discovered and (self.ability.consumeable or self.config.center.unlocked) and not self.config.center.demo and not self.bypass_discovery_center then'''
position = "before"
payload = '''
if self.celadon_disabled and self.area == G.hand then
    self.children.center:draw_shader('ortalab_celadon', nil, self.ARGS.send_to_shader)
    if self.children.front then
        self.children.front:draw_shader('ortalab_celadon', nil, self.ARGS.send_to_shader)
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''card.T.y = self.T.y + self.T.h/2 - card.T.h/2 - highlight_height + (G.SETTINGS.reduced_motion and 0 or 1)*0.03*math.sin(0.666*G.TIMERS.REAL+card.T.x) + math.abs(0.5*(-#self.cards/2 + k-0.5)/(#self.cards))-0.2'''
position = "before"
payload = '''
if card.celadon_disabled then
    highlight_height = G.HIGHLIGHT_H * -0.3
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({scale = 0.7, string = localize('ph_unscored_hand'), maxw = 9, colours = {G.C.WHITE},float = true, shadow = true, silent = true, pop_in = 0, pop_in_rate = 6})}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({scale = 0.7, string = localize(G.GAME.blind.config.blind.key == 'bl_ortalab_spike' and 'ortalab_spike_debuff' or G.GAME.blind.config.blind.key == 'bl_ortalab_fork' and 'ortalab_fork_cap' or 'ph_unscored_hand'), maxw = 9, colours = {G.C.WHITE},float = true, shadow = true, silent = true, pop_in = 0, pop_in_rate = 6})}},
'''
match_indent = true

# The Steel
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''local nu_chip, nu_mult = G.GAME.selected_back:trigger_effect{context = 'final_scoring_step', chips = hand_chips, mult = mult}'''
position = "before"
payload = '''
if G.GAME.blind.config.blind.key == 'bl_ortalab_steel' and not G.GAME.blind.disabled then
    local min_value = G.GAME.blind.config.blind:update_score({chips = hand_chips, mult = mult})
    mult = mod_mult(min_value)
    hand_chips = mod_chips(min_value)
end
'''
match_indent = true

# blind ingame UI
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if obj.loc_vars and type(obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = self.config.blind.key, set = 'Blind', vars = loc_vars or self.config.blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or self.config.vars}
'''
match_indent = true

# blind select UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if obj.loc_vars and _G['type'](obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = loc_vars or blind_choice.config.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind_choice.config.vars}
'''
match_indent = true
# blind collection UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if blind.collection_loc_vars and type(blind.collection_loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = blind:collection_loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind.key, set = 'Blind', vars = loc_vars or vars or blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind.vars}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if G.GAME.blind.name == 'The Serpent' and'''
position = "before"
payload = '''
if G.GAME.blind.config.blind.key == 'bl_ortalab_ladder' and not G.GAME.blind.disabled then
    G.GAME.blind.config.blind.config.extra.action_count = G.GAME.blind.config.blind.config.extra.action_count + 1
    if G.GAME.blind.config.blind.config.extra.action_count < 2 then hand_space = 0 else G.GAME.blind.config.blind.config.extra.action_count = 0 end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v.boss.showdown then '''
position = "at"
payload = '''if v.boss and v.boss.showdown then '''
match_indent = true

## Discard to deck
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])'''
position = 'at'
match_indent = true
payload = '''
if G.hand.highlighted[i].corroded_discard or (G.GAME.blind.config.blind.key == 'bl_ortalab_oil' and not G.GAME.blind.disabled) then
    draw_card(G.hand, G.deck, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
    G.deck:shuffle()
else
    draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
end
'''