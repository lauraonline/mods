[manifest]
version = "1.0.0"
dump_lua = true
priority = 2

## Chameleon tooltip
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end, self)'''
position = 'before'
match_indent = true
payload = '''if value == 'ortalab_chameleon' then return loc_vars end'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Invisible Joker' and (self.config.center.discovered or self.bypass_discovery_center) then'''
position = 'before'
match_indent = true
payload = '''if self.config.center_key == 'j_ortalab_chameleon' then
    if self.ability.extra.copied_joker then
        if self.children.front then self.children.front:draw_shader('dissolve') end
        self.children.center:draw_shader('ortalab_chameleon', nil, self.ARGS.send_to_shader)
    else
        self.children.center:draw_shader('dissolve')
    end
end'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:generate_UIBox_ability_table()'''
position = 'at'
match_indent = true
payload = '''function Card:generate_UIBox_ability_table(value)'''

# Black Friday discount
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.discount_percent = center_table.extra'''
position = "after"
match_indent = true
payload = '''
--Ortalab/Jokers/Black Friday
local results = SMODS.find_card('j_ortalab_black_friday')
for _, card in ipairs(results) do
    G.GAME.discount_percent = G.GAME.discount_percent + card.ability.extra.money_off
    sendDebugMessage('test')
end
'''


# Mysterium hand list population
#Inject for start up
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''boot_timer('splash prep', 'end',1)'''
position = "after"
payload = '''
--Ortalab/Jokers/The Mysterium
if (SMODS.Mods['ortalab'] or {}).can_load then
    for k, v in pairs(G.GAME.hands) do
        if v.visible == false then G.P_CENTERS['j_ortalab_mysterium'].config.extra.secret_hand_list[#G.P_CENTERS['j_ortalab_mysterium'].config.extra.secret_hand_list+1] = k end
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.FUNCS.evaluate_play()'''
position = "at"
payload = '''
G.GAME.Ortalab_Scoring_Active = true
G.FUNCS.evaluate_play()
G.GAME.Ortalab_Scoring_Active = false
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if effects[ii].message then'''
position = "before"
payload = '''
if effects[ii].chips then 
    mod_percent = true
    hand_chips = mod_chips(hand_chips + effects[ii].chips)
    update_hand_text({delay = 0}, {chips = hand_chips})
    card_eval_status_text(G.hand.cards[i], 'chips', effects[ii].chips, percent)
end
'''
match_indent = true

# ## Demo Card Badges
# [[patches]]
# [patches.pattern]
# target = 'functions/UI_definitions.lua'
# pattern = '''badges[#badges + 1] = create_badge(((card.ability.name == 'Pluto' or card.ability.name == 'Ceres' or card.ability.name == 'Eris') and localize('k_dwarf_planet')) or (card.ability.name == 'Planet X' and localize('k_planet_q') or card_type),card_type_colour, nil, 1.2)'''
# position = 'after'
# match_indent = true
# payload = '''if card.config.center.ortalab_demo_card then badges = {}; end'''

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''reset_idol_card()'''
position = "before"
payload = '''
for _, joker in pairs(G.jokers.cards) do
    if joker.ability.shinku then
        G.E_MANAGER:add_event(Event({
            func = function() 
                joker:start_dissolve()
                return true
        end}))   
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if first_pass and not (_c.set == 'Edition') and badges then'''
position = "before"
payload = '''
if specific_vars and specific_vars.shinku then
    info_queue[#info_queue + 1] = {generate_ui = ortalab_artist_tooltip, key = 'shinku', title = 'Shinku'}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end, self)'''
position = "before"
payload = '''
if self.ability.shinku then 
    if loc_vars then
        loc_vars.shinku = true
    else
        loc_vars = {shinku = true}
    end
end'''
match_indent = true

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = "if not nc and card.area then card.area:remove_card(card) end"
match_indent = true
position = 'before'
payload = '''
if card.area == G.pack_cards then
    local blue_cards = SMODS.find_card('j_ortalab_blue_card')
    for _, card in pairs(blue_cards) do
        card.ability.extra.chips = card.ability.extra.chips + card.ability.extra.gain
        card_eval_status_text(card, 'extra', nil, nil, nil, {message = '+'..card.ability.extra.gain, colour = G.C.BLUE})
    end
end'''


# Miracle Cure
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.ability.name == 'Invisible Joker' and (self.config.center.discovered or self.bypass_discovery_center) then"
match_indent = true
position = 'before'
payload = '''
if self.cured_debuff then
    self.children.center:draw_shader('debuff', nil, self.ARGS.send_to_shader)
    if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
        self.children.front:draw_shader('debuff', nil, self.ARGS.send_to_shader)
    end
end
'''

# Freezer
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = "if not nc and card.area then card.area:remove_card(card) end"
match_indent = true
position = 'before'
payload = '''
local freezers = SMODS.find_card('j_ortalab_freezer')
if next(freezers) then
    for _, freezer in ipairs(freezers) do
        if not nc and pseudoseed('ortalab_freezer') > (G.GAME.probabilities.normal * freezer.ability.extra.chance) / freezer.ability.extra.denom then
            nc = true
            card_eval_status_text(freezer, 'extra', nil, nil, nil, {message = 'Saved!'})
        end
    end
end
'''

# Negative sell cost
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = "{n=G.UIT.T, config={text = localize('$'),colour = G.C.WHITE, scale = 0.4, shadow = true}},"
match_indent = true
position = 'before'
payload = '''
(card and card.sell_cost or args.card.sell_cost) < 0 and {n=G.UIT.T, config={text = '-',colour = G.C.WHITE, scale = 0.4, shadow = true}} or {n=G.UIT.R},
'''
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.sell_cost_label = self.facing == 'back' and '?' or self.sell_cost"
match_indent = true
position = 'after'
payload = '''
if self.sell_cost < 0 and self.facing ~= 'back' then self.sell_cost_label = self.sell_cost_label * -1 end
'''

# Soil
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "local effects = {eval_card(scoring_hand[i], {cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, poker_hand = text})}"
match_indent = true
position = 'after'
payload = '''
local ortalab_soil_jokers = SMODS.find_card('j_ortalab_soil')
for _, soil_joker in ipairs(ortalab_soil_jokers) do
    if not soil_joker.ability.extra.last_triggered then
        soil_joker.ability.extra.last_triggered = scoring_hand[i].base.id
    elseif soil_joker.ability.extra.last_triggered == scoring_hand[i].base.id then
        G.E_MANAGER:add_event(Event({func = function() soil_joker:juice_up(); return true; end}))
        soil_joker.ability.extra.consecutive_ranks = soil_joker.ability.extra.consecutive_ranks + 1
    end
    soil_joker.ability.extra.last_triggered = scoring_hand[i].base.id
end
'''
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "local effects = {eval_card(G.hand.cards[i], {cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands})}"
match_indent = true
position = 'after'
payload = '''
local ortalab_soil_jokers = SMODS.find_card('j_ortalab_soil')
for _, soil_joker in ipairs(ortalab_soil_jokers) do
    if not soil_joker.ability.extra.last_triggered then
        soil_joker.ability.extra.last_triggered = G.hand.cards[i].base.id
    elseif soil_joker.ability.extra.last_triggered == G.hand.cards[i].base.id then
        G.E_MANAGER:add_event(Event({func = function() soil_joker:juice_up(); return true; end}))
        soil_joker.ability.extra.consecutive_ranks = soil_joker.ability.extra.consecutive_ranks + 1
    end
    soil_joker.ability.extra.last_triggered = G.hand.cards[i].base.id
end
'''